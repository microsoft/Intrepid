from learning.learning_utils.encoder_sampler_wrapper import EncoderSamplerWrapper
from learning.learning_utils.homer_train_encoding_function import TrainEncodingFunction
from learning.core_learner.abstract_rl_discrete_latent_state import (
    AbstractRLDiscreteLatentState,
)


class Homer(AbstractRLDiscreteLatentState):
    """
    Homer algorithm described in

        Kinematic state abstraction and provably efficient rich-observation reinforcement learning,
        Dipendra Misra, Mikael Henaff, Akshay Krishnamurthy, John Langford, ICML 2020.
    """

    def __init__(self, exp_setup):
        super(Homer, self).__init__(exp_setup)

        self.config = exp_setup.config
        self.constants = exp_setup.constants
        self.logger = exp_setup.logger
        self.experiment = exp_setup.experiment
        self.debug = exp_setup.debug
        self.actions = self.config["actions"]

        # Sampler for generating data for training the encoding function
        self.encoder_sampler = EncoderSamplerWrapper(self.constants)

        # Train encoding function
        self.train_encoder = TrainEncodingFunction(self.config, self.constants)

    def gather_dataset(self, env, step, homing_policies, num_samples, dataset):
        """
        Collect a set of dataset given the environment. Return a tuple of:
            - dataset which can be arbitrary and used by the specific implementation to train the dataset
            - list of episodes generated by the agent in the process
        Any implementation needs to implement this.
        """

        dataset = self.encoder_sampler.gather_samples(env, self.actions, step, homing_policies, num_samples, dataset)
        episodes = [dp for dp in dataset if dp.is_valid() == 1]
        return dataset, episodes

    def train_discrete_encoder(
        self,
        dataset,
        logger,
        tensorboard,
        debug,
        bootstrap_model,
        undiscretized_initialization=True,
    ):
        """
        Returns:
            - encoding_function: a function that maps an observation to one of the s values where s is a natural number
            - num_state_budget: the natural number s
        """
        encoding_function, num_state_budget = self.train_encoder.do_train(
            dataset,
            self.logger,
            tensorboard,
            self.debug,
            bootstrap_model=bootstrap_model,
            undiscretized_initialization=undiscretized_initialization,
            category="backward",
        )

        return encoding_function, num_state_budget
